<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.usdttrading.repository.PlatformWalletMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.usdttrading.entity.PlatformWallet">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="currency" property="currency" />
        <result column="address" property="address" />
        <result column="private_key" property="privateKey" />
        <result column="balance" property="balance" />
        <result column="reserved_balance" property="reservedBalance" />
        <result column="wallet_type" property="walletType" />
        <result column="is_active" property="isActive" />
        <result column="auto_collect" property="autoCollect" />
        <result column="collect_threshold" property="collectThreshold" />
        <result column="description" property="description" />
        <result column="created_at" property="createdAt" />
        <result column="updated_at" property="updatedAt" />
        <result column="deleted" property="deleted" />
        <result column="available_balance" property="availableBalance" />
    </resultMap>

    <!-- 通用查询SQL片段 -->
    <sql id="selectPlatformWallet">
        SELECT pw.*, 
               (pw.balance - COALESCE(pw.reserved_balance, 0)) as available_balance
        FROM platform_wallets pw 
        WHERE pw.deleted = 0
    </sql>

    <!-- 查询条件SQL片段 -->
    <sql id="whereConditions">
        <where>
            <if test="name != null and name != ''">
                AND pw.name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="currency != null and currency != ''">
                AND pw.currency = #{currency}
            </if>
            <if test="address != null and address != ''">
                AND pw.address = #{address}
            </if>
            <if test="walletType != null and walletType != ''">
                AND pw.wallet_type = #{walletType}
            </if>
            <if test="isActive != null">
                AND pw.is_active = #{isActive}
            </if>
            <if test="autoCollect != null">
                AND pw.auto_collect = #{autoCollect}
            </if>
            <if test="minBalance != null">
                AND pw.balance >= #{minBalance}
            </if>
            <if test="maxBalance != null">
                AND pw.balance &lt;= #{maxBalance}
            </if>
            <if test="minAvailableBalance != null">
                AND (pw.balance - COALESCE(pw.reserved_balance, 0)) >= #{minAvailableBalance}
            </if>
        </where>
    </sql>

    <!-- 根据ID查询平台钱包 -->
    <select id="selectById" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.id = #{id}
    </select>

    <!-- 分页查询平台钱包列表 -->
    <select id="selectPlatformWalletList" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        <include refid="whereConditions" />
        ORDER BY pw.currency ASC, pw.wallet_type ASC, pw.balance DESC
    </select>

    <!-- 根据币种查询钱包 -->
    <select id="selectByCurrency" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.currency = #{currency} 
        AND pw.is_active = 1
        ORDER BY pw.balance DESC
    </select>

    <!-- 查询可用的钱包 -->
    <select id="selectAvailableWallets" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.is_active = 1 
        AND pw.balance &gt; #{minBalance}
        ORDER BY pw.balance DESC
    </select>

    <!-- 根据地址查询钱包 -->
    <select id="selectByAddress" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.address = #{address}
    </select>

    <!-- 查询主钱包 -->
    <select id="selectMainWallet" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.currency = #{currency} 
        AND pw.wallet_type = 'main' 
        AND pw.is_active = 1
        LIMIT 1
    </select>

    <!-- 查询热钱包 -->
    <select id="selectHotWallets" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.currency = #{currency} 
        AND pw.wallet_type = 'hot' 
        AND pw.is_active = 1
        ORDER BY pw.balance DESC
    </select>

    <!-- 查询冷钱包 -->
    <select id="selectColdWallets" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.currency = #{currency} 
        AND pw.wallet_type = 'cold' 
        AND pw.is_active = 1
        ORDER BY pw.balance DESC
    </select>

    <!-- 查询手续费钱包 -->
    <select id="selectFeeWallets" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.currency = #{currency} 
        AND pw.wallet_type = 'fee' 
        AND pw.is_active = 1
        ORDER BY pw.balance DESC
    </select>

    <!-- 计算币种总余额 -->
    <select id="calculateTotalBalance" resultType="java.math.BigDecimal">
        SELECT COALESCE(SUM(balance), 0) 
        FROM platform_wallets 
        WHERE currency = #{currency} 
        AND is_active = 1 
        AND deleted = 0
    </select>

    <!-- 计算币种可用余额 -->
    <select id="calculateAvailableBalance" resultType="java.math.BigDecimal">
        SELECT COALESCE(SUM(balance - COALESCE(reserved_balance, 0)), 0) 
        FROM platform_wallets 
        WHERE currency = #{currency} 
        AND is_active = 1 
        AND deleted = 0
    </select>

    <!-- 查询余额不足的钱包 -->
    <select id="selectLowBalanceWallets" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.balance &lt; #{threshold}
        AND pw.is_active = 1
        ORDER BY pw.balance ASC
    </select>

    <!-- 查询需要收集的钱包 -->
    <select id="selectWalletsNeedingCollection" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.auto_collect = 1 
        AND pw.collect_threshold IS NOT NULL 
        AND pw.balance >= pw.collect_threshold
        AND pw.is_active = 1
        ORDER BY pw.balance DESC
    </select>

    <!-- 查询高余额钱包 -->
    <select id="selectHighBalanceWallets" resultMap="BaseResultMap">
        <include refid="selectPlatformWallet" />
        AND pw.balance &gt; #{threshold}
        AND pw.is_active = 1
        ORDER BY pw.balance DESC
    </select>

    <!-- 查询指定类型的钱包统计 -->
    <select id="getWalletStatsByType" resultType="java.util.Map">
        SELECT 
            pw.wallet_type,
            COUNT(*) as wallet_count,
            SUM(pw.balance) as total_balance,
            AVG(pw.balance) as avg_balance,
            MIN(pw.balance) as min_balance,
            MAX(pw.balance) as max_balance,
            SUM(pw.balance - COALESCE(pw.reserved_balance, 0)) as total_available_balance
        FROM platform_wallets pw
        WHERE pw.currency = #{currency}
        AND pw.is_active = 1
        AND pw.deleted = 0
        GROUP BY pw.wallet_type
        ORDER BY total_balance DESC
    </select>

    <!-- 查询币种余额分布 -->
    <select id="getBalanceDistribution" resultType="java.util.Map">
        SELECT 
            pw.currency,
            COUNT(*) as wallet_count,
            SUM(pw.balance) as total_balance,
            AVG(pw.balance) as avg_balance,
            COUNT(CASE WHEN pw.is_active = 1 THEN 1 END) as active_count
        FROM platform_wallets pw
        WHERE pw.deleted = 0
        GROUP BY pw.currency
        ORDER BY total_balance DESC
    </select>

    <!-- 更新钱包余额 -->
    <update id="updateBalance">
        UPDATE platform_wallets 
        SET balance = #{balance}, updated_at = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 增加钱包余额 -->
    <update id="increaseBalance">
        UPDATE platform_wallets 
        SET balance = COALESCE(balance, 0) + #{amount}, updated_at = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 减少钱包余额 -->
    <update id="decreaseBalance">
        UPDATE platform_wallets 
        SET balance = COALESCE(balance, 0) - #{amount}, updated_at = NOW()
        WHERE id = #{id} AND deleted = 0 AND COALESCE(balance, 0) >= #{amount}
    </update>

    <!-- 更新预留余额 -->
    <update id="updateReservedBalance">
        UPDATE platform_wallets 
        SET reserved_balance = #{reservedBalance}, updated_at = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 增加预留余额 -->
    <update id="increaseReservedBalance">
        UPDATE platform_wallets 
        SET reserved_balance = COALESCE(reserved_balance, 0) + #{amount}, updated_at = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 减少预留余额 -->
    <update id="decreaseReservedBalance">
        UPDATE platform_wallets 
        SET reserved_balance = COALESCE(reserved_balance, 0) - #{amount}, updated_at = NOW()
        WHERE id = #{id} AND deleted = 0 AND COALESCE(reserved_balance, 0) >= #{amount}
    </update>

    <!-- 启用/禁用钱包 -->
    <update id="updateWalletStatus">
        UPDATE platform_wallets 
        SET is_active = #{isActive}, updated_at = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 批量启用/禁用钱包 -->
    <update id="batchUpdateStatus">
        UPDATE platform_wallets 
        SET is_active = #{isActive}, updated_at = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 更新自动收集设置 -->
    <update id="updateAutoCollectSettings">
        UPDATE platform_wallets 
        SET auto_collect = #{autoCollect}, 
            collect_threshold = #{collectThreshold},
            updated_at = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 统计钱包数量 -->
    <select id="countWallets" resultType="java.lang.Long">
        SELECT COUNT(*) 
        FROM platform_wallets pw 
        WHERE pw.deleted = 0
        <include refid="whereConditions" />
    </select>

    <!-- 批量软删除钱包 -->
    <update id="batchDelete">
        UPDATE platform_wallets 
        SET deleted = 1, updated_at = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 钱包余额快照 -->
    <select id="getWalletSnapshot" resultType="java.util.Map">
        SELECT 
            pw.currency,
            pw.wallet_type,
            pw.address,
            pw.balance,
            pw.reserved_balance,
            (pw.balance - COALESCE(pw.reserved_balance, 0)) as available_balance,
            pw.is_active,
            pw.updated_at as last_updated
        FROM platform_wallets pw
        WHERE pw.deleted = 0
        ORDER BY pw.currency ASC, pw.wallet_type ASC, pw.balance DESC
    </select>

</mapper>