<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.usdttrading.repository.OrderTransactionMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.usdttrading.entity.OrderTransaction">
        <id column="id" property="id" />
        <result column="order_id" property="orderId" />
        <result column="transaction_hash" property="transactionHash" />
        <result column="block_number" property="blockNumber" />
        <result column="confirmations" property="confirmations" />
        <result column="gas_used" property="gasUsed" />
        <result column="gas_price" property="gasPrice" />
        <result column="status" property="status" />
        <result column="error_message" property="errorMessage" />
        <result column="created_at" property="createdAt" />
        <result column="updated_at" property="updatedAt" />
        <result column="deleted" property="deleted" />
        <result column="order_number" property="orderNumber" />
        <result column="user_id" property="userId" />
        <result column="user_email" property="userEmail" />
    </resultMap>

    <!-- 通用查询SQL片段 -->
    <sql id="selectOrderTransactionWithOrder">
        SELECT ot.*, o.order_number, o.user_id, u.email as user_email
        FROM order_transactions ot 
        LEFT JOIN orders o ON ot.order_id = o.id 
        LEFT JOIN users u ON o.user_id = u.id
        WHERE ot.deleted = 0
    </sql>

    <!-- 查询条件SQL片段 -->
    <sql id="whereConditions">
        <where>
            <if test="orderId != null">
                AND ot.order_id = #{orderId}
            </if>
            <if test="transactionHash != null and transactionHash != ''">
                AND ot.transaction_hash = #{transactionHash}
            </if>
            <if test="blockNumber != null">
                AND ot.block_number = #{blockNumber}
            </if>
            <if test="status != null and status != ''">
                AND ot.status = #{status}
            </if>
            <if test="minConfirmations != null">
                AND ot.confirmations >= #{minConfirmations}
            </if>
            <if test="maxConfirmations != null">
                AND ot.confirmations &lt;= #{maxConfirmations}
            </if>
            <if test="userId != null">
                AND o.user_id = #{userId}
            </if>
            <if test="startTime != null">
                AND ot.created_at >= #{startTime}
            </if>
            <if test="endTime != null">
                AND ot.created_at &lt;= #{endTime}
            </if>
        </where>
    </sql>

    <!-- 根据ID查询订单交易（包含订单和用户信息） -->
    <select id="selectById" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        AND ot.id = #{id}
    </select>

    <!-- 分页查询订单交易列表 -->
    <select id="selectOrderTransactionList" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        <include refid="whereConditions" />
        ORDER BY ot.created_at DESC
    </select>

    <!-- 根据订单ID查询交易记录 -->
    <select id="selectByOrderId" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        AND ot.order_id = #{orderId}
        ORDER BY ot.created_at DESC
    </select>

    <!-- 根据交易哈希查询记录 -->
    <select id="selectByTransactionHash" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        AND ot.transaction_hash = #{txHash}
    </select>

    <!-- 查询待确认的交易 -->
    <select id="selectPendingConfirmations" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        AND ot.status = 'pending' 
        AND (ot.confirmations IS NULL OR ot.confirmations &lt; 19)
        ORDER BY ot.created_at ASC
    </select>

    <!-- 查询失败的交易 -->
    <select id="selectFailedTransactions" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        AND ot.status = 'failed'
        ORDER BY ot.created_at DESC
    </select>

    <!-- 查询用户的交易记录 -->
    <select id="selectByUserId" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        AND o.user_id = #{userId}
        ORDER BY ot.created_at DESC
    </select>

    <!-- 查询指定区块范围的交易 -->
    <select id="selectByBlockRange" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        AND ot.block_number BETWEEN #{startBlock} AND #{endBlock}
        ORDER BY ot.block_number ASC, ot.created_at ASC
    </select>

    <!-- 查询高确认数的交易 -->
    <select id="selectHighConfirmationTransactions" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        AND ot.confirmations >= #{minConfirmations}
        AND ot.status = 'confirmed'
        ORDER BY ot.confirmations DESC
    </select>

    <!-- 查询低确认数的交易 -->
    <select id="selectLowConfirmationTransactions" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        AND ot.confirmations IS NOT NULL 
        AND ot.confirmations &lt; #{maxConfirmations}
        AND ot.status != 'failed'
        ORDER BY ot.confirmations ASC
    </select>

    <!-- 查询高Gas费用的交易 -->
    <select id="selectHighGasFeeTransactions" resultMap="BaseResultMap">
        <include refid="selectOrderTransactionWithOrder" />
        AND (ot.gas_used * ot.gas_price) &gt; #{minGasFee}
        ORDER BY (ot.gas_used * ot.gas_price) DESC
    </select>

    <!-- 更新交易确认数 -->
    <update id="updateConfirmations">
        UPDATE order_transactions 
        SET confirmations = #{confirmations}, 
            block_number = #{blockNumber},
            updated_at = NOW()
        WHERE transaction_hash = #{transactionHash} AND deleted = 0
    </update>

    <!-- 更新交易状态 -->
    <update id="updateTransactionStatus">
        UPDATE order_transactions 
        SET status = #{status}, 
            error_message = #{errorMessage},
            updated_at = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 批量更新交易状态 -->
    <update id="batchUpdateStatus">
        UPDATE order_transactions 
        SET status = #{status}, updated_at = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 统计交易数量 -->
    <select id="countTransactions" resultType="java.lang.Long">
        SELECT COUNT(*) 
        FROM order_transactions ot
        LEFT JOIN orders o ON ot.order_id = o.id
        WHERE ot.deleted = 0
        <include refid="whereConditions" />
    </select>

    <!-- 统计按状态分组的交易数量 -->
    <select id="countByStatus" resultType="java.util.Map">
        SELECT ot.status, COUNT(*) as count
        FROM order_transactions ot 
        WHERE ot.deleted = 0
        <if test="startTime != null">
            AND ot.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND ot.created_at &lt;= #{endTime}
        </if>
        GROUP BY ot.status
        ORDER BY count DESC
    </select>

    <!-- 统计每日交易量 -->
    <select id="countByDate" resultType="java.util.Map">
        SELECT DATE(ot.created_at) as date, COUNT(*) as count
        FROM order_transactions ot 
        WHERE ot.deleted = 0
        AND ot.created_at BETWEEN #{startTime} AND #{endTime}
        GROUP BY DATE(ot.created_at)
        ORDER BY date DESC
    </select>

    <!-- 统计平均确认时间 -->
    <select id="getAverageConfirmationTime" resultType="java.util.Map">
        SELECT 
            AVG(TIMESTAMPDIFF(MINUTE, ot.created_at, ot.updated_at)) as avg_confirmation_minutes,
            MIN(TIMESTAMPDIFF(MINUTE, ot.created_at, ot.updated_at)) as min_confirmation_minutes,
            MAX(TIMESTAMPDIFF(MINUTE, ot.created_at, ot.updated_at)) as max_confirmation_minutes,
            COUNT(*) as confirmed_count
        FROM order_transactions ot 
        WHERE ot.status = 'confirmed' 
        AND ot.deleted = 0
        <if test="startTime != null">
            AND ot.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND ot.created_at &lt;= #{endTime}
        </if>
    </select>

    <!-- 统计Gas费用统计 -->
    <select id="getGasFeeStatistics" resultType="java.util.Map">
        SELECT 
            AVG(ot.gas_used * ot.gas_price) as avg_gas_fee,
            MIN(ot.gas_used * ot.gas_price) as min_gas_fee,
            MAX(ot.gas_used * ot.gas_price) as max_gas_fee,
            SUM(ot.gas_used * ot.gas_price) as total_gas_fee,
            COUNT(*) as transaction_count
        FROM order_transactions ot 
        WHERE ot.gas_used IS NOT NULL 
        AND ot.gas_price IS NOT NULL 
        AND ot.deleted = 0
        <if test="startTime != null">
            AND ot.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND ot.created_at &lt;= #{endTime}
        </if>
    </select>

    <!-- 查询确认数分布 -->
    <select id="getConfirmationDistribution" resultType="java.util.Map">
        SELECT 
            CASE 
                WHEN ot.confirmations IS NULL THEN 'unknown'
                WHEN ot.confirmations = 0 THEN '0'
                WHEN ot.confirmations BETWEEN 1 AND 5 THEN '1-5'
                WHEN ot.confirmations BETWEEN 6 AND 11 THEN '6-11'
                WHEN ot.confirmations BETWEEN 12 AND 18 THEN '12-18'
                WHEN ot.confirmations >= 19 THEN '19+'
                ELSE 'other'
            END as confirmation_range,
            COUNT(*) as count
        FROM order_transactions ot 
        WHERE ot.deleted = 0
        <if test="startTime != null">
            AND ot.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND ot.created_at &lt;= #{endTime}
        </if>
        GROUP BY confirmation_range
        ORDER BY 
            CASE confirmation_range
                WHEN 'unknown' THEN 0
                WHEN '0' THEN 1
                WHEN '1-5' THEN 2
                WHEN '6-11' THEN 3
                WHEN '12-18' THEN 4
                WHEN '19+' THEN 5
                ELSE 6
            END
    </select>

    <!-- 批量软删除交易记录 -->
    <update id="batchDelete">
        UPDATE order_transactions 
        SET deleted = 1, updated_at = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 清理过期的失败交易记录 -->
    <update id="cleanupFailedTransactions">
        UPDATE order_transactions 
        SET deleted = 1, updated_at = NOW()
        WHERE status = 'failed' 
        AND created_at &lt; #{expiredDate}
        AND deleted = 0
    </update>

</mapper>