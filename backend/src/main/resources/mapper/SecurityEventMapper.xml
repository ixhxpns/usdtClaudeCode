<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.usdttrading.repository.SecurityEventMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.usdttrading.entity.SecurityEvent">
        <id column="id" property="id" />
        <result column="user_id" property="userId" />
        <result column="event_type" property="eventType" />
        <result column="severity" property="severity" />
        <result column="description" property="description" />
        <result column="metadata" property="metadata" />
        <result column="ip_address" property="ipAddress" />
        <result column="user_agent" property="userAgent" />
        <result column="is_resolved" property="isResolved" />
        <result column="resolved_by" property="resolvedBy" />
        <result column="resolved_at" property="resolvedAt" />
        <result column="created_at" property="createdAt" />
        <result column="updated_at" property="updatedAt" />
        <result column="deleted" property="deleted" />
        <result column="user_email" property="userEmail" />
        <result column="resolver_email" property="resolverEmail" />
    </resultMap>

    <!-- 通用查询SQL片段 -->
    <sql id="selectSecurityEventWithUser">
        SELECT se.*, 
               u.email as user_email,
               r.email as resolver_email
        FROM security_events se 
        LEFT JOIN users u ON se.user_id = u.id 
        LEFT JOIN users r ON se.resolved_by = r.id
        WHERE se.deleted = 0
    </sql>

    <!-- 查询条件SQL片段 -->
    <sql id="whereConditions">
        <where>
            <if test="userId != null">
                AND se.user_id = #{userId}
            </if>
            <if test="eventType != null and eventType != ''">
                AND se.event_type = #{eventType}
            </if>
            <if test="severity != null and severity != ''">
                AND se.severity = #{severity}
            </if>
            <if test="ipAddress != null and ipAddress != ''">
                AND se.ip_address = #{ipAddress}
            </if>
            <if test="isResolved != null">
                AND se.is_resolved = #{isResolved}
            </if>
            <if test="resolvedBy != null">
                AND se.resolved_by = #{resolvedBy}
            </if>
            <if test="startTime != null">
                AND se.created_at >= #{startTime}
            </if>
            <if test="endTime != null">
                AND se.created_at &lt;= #{endTime}
            </if>
            <if test="description != null and description != ''">
                AND se.description LIKE CONCAT('%', #{description}, '%')
            </if>
        </where>
    </sql>

    <!-- 根据ID查询安全事件（包含用户信息） -->
    <select id="selectById" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.id = #{id}
    </select>

    <!-- 分页查询安全事件列表 -->
    <select id="selectSecurityEventList" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        <include refid="whereConditions" />
        ORDER BY se.severity DESC, se.created_at DESC
    </select>

    <!-- 分页查询用户安全事件 -->
    <select id="selectPageByUserId" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.user_id = #{userId}
        ORDER BY se.created_at DESC
    </select>

    <!-- 查询未处理的高危事件 -->
    <select id="selectUnresolvedHighRiskEvents" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.is_resolved = 0 
        AND se.severity IN ('high', 'critical')
        ORDER BY se.severity DESC, se.created_at DESC
    </select>

    <!-- 根据事件类型查询 -->
    <select id="selectByEventType" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.event_type = #{eventType} 
        AND se.created_at BETWEEN #{startTime} AND #{endTime}
        ORDER BY se.created_at DESC
    </select>

    <!-- 查询指定IP的安全事件 -->
    <select id="selectByIpAddress" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.ip_address = #{ipAddress}
        ORDER BY se.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 统计用户特定事件次数 -->
    <select id="countUserEventsSince" resultType="java.lang.Long">
        SELECT COUNT(*) 
        FROM security_events 
        WHERE user_id = #{userId} 
        AND event_type = #{eventType} 
        AND created_at >= #{since}
        AND deleted = 0
    </select>

    <!-- 查询需要关注的事件 -->
    <select id="selectUnresolvedBySeverity" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.is_resolved = 0 
        AND se.severity = #{severity}
        ORDER BY se.created_at ASC
    </select>

    <!-- 查询最近的登录失败事件 -->
    <select id="selectRecentLoginFailures" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.user_id = #{userId} 
        AND se.event_type = 'login_failed' 
        AND se.created_at >= #{since}
        ORDER BY se.created_at DESC
    </select>

    <!-- 查询可疑活动事件 -->
    <select id="selectSuspiciousActivities" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.event_type = 'suspicious_activity'
        <if test="startTime != null">
            AND se.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND se.created_at &lt;= #{endTime}
        </if>
        ORDER BY se.severity DESC, se.created_at DESC
    </select>

    <!-- 查询账户锁定事件 -->
    <select id="selectAccountLockEvents" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.event_type = 'account_locked'
        <if test="startTime != null">
            AND se.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND se.created_at &lt;= #{endTime}
        </if>
        ORDER BY se.created_at DESC
    </select>

    <!-- 查询大额交易事件 -->
    <select id="selectLargeTransactionEvents" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.event_type IN ('large_withdrawal', 'large_deposit', 'large_transfer')
        <if test="startTime != null">
            AND se.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND se.created_at &lt;= #{endTime}
        </if>
        ORDER BY se.created_at DESC
    </select>

    <!-- 查询设备变更事件 -->
    <select id="selectDeviceChangeEvents" resultMap="BaseResultMap">
        <include refid="selectSecurityEventWithUser" />
        AND se.event_type = 'device_change'
        <if test="userId != null">
            AND se.user_id = #{userId}
        </if>
        <if test="startTime != null">
            AND se.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND se.created_at &lt;= #{endTime}
        </if>
        ORDER BY se.created_at DESC
    </select>

    <!-- 标记事件为已处理 -->
    <update id="markAsResolved">
        UPDATE security_events 
        SET is_resolved = 1, 
            resolved_by = #{resolvedBy}, 
            resolved_at = NOW(),
            updated_at = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 批量标记事件为已处理 -->
    <update id="batchMarkAsResolved">
        UPDATE security_events 
        SET is_resolved = 1, 
            resolved_by = #{resolvedBy}, 
            resolved_at = NOW(),
            updated_at = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 重新打开已处理的事件 -->
    <update id="reopenEvent">
        UPDATE security_events 
        SET is_resolved = 0, 
            resolved_by = NULL, 
            resolved_at = NULL,
            updated_at = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 统计安全事件数量 -->
    <select id="countSecurityEvents" resultType="java.lang.Long">
        SELECT COUNT(*) 
        FROM security_events se 
        WHERE se.deleted = 0
        <include refid="whereConditions" />
    </select>

    <!-- 统计按事件类型分组的数量 -->
    <select id="countByEventType" resultType="java.util.Map">
        SELECT se.event_type, COUNT(*) as count
        FROM security_events se 
        WHERE se.deleted = 0
        <if test="startTime != null">
            AND se.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND se.created_at &lt;= #{endTime}
        </if>
        GROUP BY se.event_type
        ORDER BY count DESC
    </select>

    <!-- 统计按严重程度分组的数量 -->
    <select id="countBySeverity" resultType="java.util.Map">
        SELECT se.severity, COUNT(*) as count
        FROM security_events se 
        WHERE se.deleted = 0
        <if test="startTime != null">
            AND se.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND se.created_at &lt;= #{endTime}
        </if>
        GROUP BY se.severity
        ORDER BY 
            CASE se.severity
                WHEN 'critical' THEN 1
                WHEN 'high' THEN 2
                WHEN 'medium' THEN 3
                WHEN 'low' THEN 4
                ELSE 5
            END
    </select>

    <!-- 统计每日安全事件量 -->
    <select id="countByDate" resultType="java.util.Map">
        SELECT DATE(se.created_at) as date, COUNT(*) as count
        FROM security_events se 
        WHERE se.deleted = 0
        AND se.created_at BETWEEN #{startTime} AND #{endTime}
        GROUP BY DATE(se.created_at)
        ORDER BY date DESC
    </select>

    <!-- 查询处理时间统计 -->
    <select id="getResolutionTimeStats" resultType="java.util.Map">
        SELECT 
            se.severity,
            COUNT(*) as resolved_count,
            AVG(TIMESTAMPDIFF(MINUTE, se.created_at, se.resolved_at)) as avg_resolution_minutes,
            MIN(TIMESTAMPDIFF(MINUTE, se.created_at, se.resolved_at)) as min_resolution_minutes,
            MAX(TIMESTAMPDIFF(MINUTE, se.created_at, se.resolved_at)) as max_resolution_minutes
        FROM security_events se 
        WHERE se.is_resolved = 1 
        AND se.resolved_at IS NOT NULL
        AND se.deleted = 0
        <if test="startTime != null">
            AND se.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND se.created_at &lt;= #{endTime}
        </if>
        GROUP BY se.severity
        ORDER BY 
            CASE se.severity
                WHEN 'critical' THEN 1
                WHEN 'high' THEN 2
                WHEN 'medium' THEN 3
                WHEN 'low' THEN 4
                ELSE 5
            END
    </select>

    <!-- 查询IP地址统计 -->
    <select id="getIpAddressStats" resultType="java.util.Map">
        SELECT 
            se.ip_address,
            COUNT(*) as event_count,
            COUNT(DISTINCT se.user_id) as affected_users,
            COUNT(CASE WHEN se.severity IN ('high', 'critical') THEN 1 END) as high_risk_count,
            MIN(se.created_at) as first_event,
            MAX(se.created_at) as last_event
        FROM security_events se 
        WHERE se.deleted = 0
        AND se.ip_address IS NOT NULL
        <if test="startTime != null">
            AND se.created_at >= #{startTime}
        </if>
        <if test="endTime != null">
            AND se.created_at &lt;= #{endTime}
        </if>
        GROUP BY se.ip_address
        HAVING event_count >= #{minEventCount}
        ORDER BY high_risk_count DESC, event_count DESC
    </select>

    <!-- 查询用户安全概览 -->
    <select id="getUserSecuritySummary" resultType="java.util.Map">
        SELECT 
            COUNT(*) as total_events,
            COUNT(CASE WHEN se.is_resolved = 0 THEN 1 END) as unresolved_count,
            COUNT(CASE WHEN se.severity = 'critical' THEN 1 END) as critical_count,
            COUNT(CASE WHEN se.severity = 'high' THEN 1 END) as high_count,
            COUNT(CASE WHEN se.event_type = 'login_failed' THEN 1 END) as login_failure_count,
            COUNT(CASE WHEN se.event_type = 'suspicious_activity' THEN 1 END) as suspicious_count,
            MAX(se.created_at) as last_event_time
        FROM security_events se 
        WHERE se.user_id = #{userId} 
        AND se.deleted = 0
        <if test="since != null">
            AND se.created_at >= #{since}
        </if>
    </select>

    <!-- 批量软删除安全事件 -->
    <update id="batchDelete">
        UPDATE security_events 
        SET deleted = 1, updated_at = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 清理过期的已处理事件 -->
    <update id="cleanupResolvedEvents">
        UPDATE security_events 
        SET deleted = 1, updated_at = NOW()
        WHERE is_resolved = 1 
        AND resolved_at &lt; #{expiredDate}
        AND deleted = 0
    </update>

    <!-- 批量插入安全事件 -->
    <insert id="batchInsert">
        INSERT INTO security_events (
            user_id, event_type, severity, description, metadata, 
            ip_address, user_agent, is_resolved, created_at, updated_at
        ) VALUES
        <foreach collection="list" item="item" separator=",">
            (
                #{item.userId}, #{item.eventType}, #{item.severity}, #{item.description}, #{item.metadata},
                #{item.ipAddress}, #{item.userAgent}, #{item.isResolved}, NOW(), NOW()
            )
        </foreach>
    </insert>

</mapper>